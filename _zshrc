# overwrite /etc/zshrc
export HISTSIZE=10000
export SAVEHIST=100000
export ZLS_COLORS=$LS_COLORS

# 履歴
setopt extended_history   # 履歴ファイルに時刻を記録
setopt inc_append_history # シェルの終了を待たずにコマンド履歴を保存
setopt share_history      # プロセスごとに履歴を共有
# setopt hist_expand        # !からの履歴補完. BANG_HIST の alias. default で on

# 履歴補完
# autoload -Uz predict-on && predict-on
source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
# ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=5'

# コマンド補完
autoload -Uz compinit && compinit
autoload colors
zstyle ':completion:*' verbose yes
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' # 大文字、小文字を区別せず補完する
zstyle ':completion:*:default' menu select=1        # 補完候補のカーソル選択を有効
setopt list_packed                                  # 補完候補を詰めて表示

#setopt auto_cd           # ディレクトリ名で cd
#setopt autopushd         # cd 時に自動で push
#setopt pushd_ignore_dups # 同じディレクトリを pushd しない

setopt correct           # スペルチェック

# rm *で確認を求める機能を無効化する
setopt RM_STAR_SILENT
# コマンドライン実行時にもコメントを使えるようにする
setopt INTERACTIVE_COMMENTS

# prompt
# ブランチ名を色付きで表示させるメソッド
function rprompt-git-current-branch {
  local branch_name st branch_status

  if [ ! -e  ".git" ]; then
    # gitで管理されていないディレクトリは何も返さない
    return
  fi
  branch_name=`git rev-parse --abbrev-ref HEAD 2> /dev/null`
  st=`git status 2> /dev/null`
  if [[ -n `echo "$st" | grep "^nothing to"` ]]; then
    branch_status="%F{green}"
  elif [[ -n `echo "$st" | grep "^Untracked files"` ]]; then
    branch_status="%F{red}?"
  elif [[ -n `echo "$st" | grep "^Changes not staged for commit"` ]]; then
    branch_status="%F{red}+"
  elif [[ -n `echo "$st" | grep "^Changes to be committed"` ]]; then
    branch_status="%F{yellow}!"
  elif [[ -n `echo "$st" | grep "^rebase in progress"` ]]; then
    echo "%F{red}!(no branch)"
    return
  else
    branch_status="%F{blue}"
  fi
  echo "${branch_status}[$branch_name]" # ブランチ名を色付きで表示する
}
setopt prompt_subst # プロンプトが表示されるたびにプロンプト文字列を評価、置換する

function network-service {
  services=$(networksetup -listnetworkserviceorder | grep 'Hardware Port')

  while read line; do
    sname=$(echo $line | awk -F  "(, )|(: )|[)]" '{print $2}')
    sdev=$(echo $line | awk -F  "(, )|(: )|[)]" '{print $4}')
    # echo "sname: $sname, $sdev"
    if [ -n "$sdev" ]; then
      ifconfig $sdev 2>/dev/null | grep 'status: active' > /dev/null 2>&1
      rc="$?"
      if [ "$rc" -eq 0 ]; then
        currentservice="$sname"
        if [ "$currentservice" = "USB 10/100/1000 LAN" ]; then
          currentservice="LAN `ifconfig $sdev | grep 'media:' | grep -o '(.*)' | sed -e 's/[()]//g' | awk '{print $1}'`"
          break
        elif [ "$currentservice" = "Thunderbolt Ethernet Slot 1" ]; then
          currentservice="Thunderbolt Eth `ifconfig $sdev | grep 'media:' | grep -o '(.*)' | sed -e 's/[()]//g' | awk '{print $1}'`"
          break
        else [ "$currentservice" = "Wi-Fi" ]
          currentservice=`~/git/sandbox/src/sh/wifi`
        fi
      fi
    fi
  done <<< "$(echo "$services")"

  if [ -n "$currentservice" ]; then
    echo "$currentservice"
  else
    echo "No Network"
  fi
}

RPROMPT='`rprompt-git-current-branch`'
PROMPT='%F{blue}`network-service` %F{yellow}%t%f %F{yellow}%n@%m%f %F{green}%~%f
%# '

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/opt/google-cloud-sdk/path.zsh.inc' ]; then . '/opt/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/opt/google-cloud-sdk/completion.zsh.inc' ]; then . '/opt/google-cloud-sdk/completion.zsh.inc'; fi
